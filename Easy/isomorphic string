Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
========================================================
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char, int> s1;
        unordered_map<char, int> t1;
        unordered_map<char, int> mapping;
        if(s.length() == t.length())
        {//mapping
        for( int i = 0; i< s.length();i++)
        {
            if(mapping[s[i]] == 0)
            {
                mapping[s[i]] = static_cast<int>(t[i]);
            }
            else if( mapping[s[i]]!= 0 && mapping[s[i]] !=static_cast<int>(t[i]) )
            {
                return false;
            }
        }
        for(int i = 0; i< s.length(); i++)
        {
            s1[s[i]]++;
            t1[t[i]]++;
        }
        for( int i = 0; i<s.length();i++ )
        {cout<< s1[s[i]];
        cout<< t1[t[i]];

            if( s1[s[i]]!=t1[t[i]])
            {
                return false;
            }
        }
        return true;
        }
        return false;
        
        
    }
};
