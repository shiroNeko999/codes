Given an array arr, return the second largest distinct element from an array. If the second largest element doesn't exist then return -1.

Examples:

Input: arr = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr = [10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist so answer is -1.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
====================================
//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution {
  public:
    // Function returns the second
    // largest elements
    int print2largest(vector<int> &arr) {
        // Code Here
        int largest = 0;
        int s_largest = INT_MAX;
        for(int i = 0; i<arr.size(); i++)
        {
            if(arr[i]>largest)
            {
                s_largest = largest;
                largest = arr[i]; //   SATH HI SATH JO PEHLE LARGEST THA VO AB SECOND LARGEST BN CHUKA HAI 
                
            }
            else if (arr[i]<largest && arr[i]>s_largest)
            {
                s_largest = arr[i]; IF THE ELEMENT IS NOT THE LARGEST WE STILL NEED TO CHECK IF IT IS GREATER THAN THE SECOND LARGEST ELEMENT
                
            }
           
        }
        if(s_largest==0)
        {
            return -1;
        }
        else 
        {
            return s_largest;
        }
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution ob;
        int ans = ob.print2largest(arr);
        cout << ans << endl;
    }
    return 0;
}

// } Driver Code Ends
