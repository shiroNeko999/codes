Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
==============================================================================================
// iis code me cancelling out ka pura dekhte hai kaise hota hai 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int cnt =0; int ele = 0;
        for( int i =0; i< nums.size(); i++)
        {
            if( cnt == 0)
            {
                cnt=1;
                ele = nums[i];
            }
            else if(ele==nums[i])
            {
                cnt++;
            }
            else
            {
                cnt--;
            }
        }

        int cnt1= 0;
        for( int i = 0; i< nums.size(); i++)
        {
            if(nums[i]== ele)
            {
                cnt1++;
            }
        }
        if(cnt1> nums.size()/2)
        
            return ele;
    return -1;
    }
};
