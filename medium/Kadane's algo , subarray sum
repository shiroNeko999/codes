Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
========================-----------------------------------------------------=============================


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi = INT_MIN; // Initialize maxi to the smallest possible value
        int sum = 0;        // Initialize sum to 0
        
        for(int i = 0; i < nums.size(); i++) {   
            sum += nums[i]; // Add current number to sum
            
            // Update maxi if the current sum is greater
            if(sum > maxi) {
                maxi = sum;
            }
            
            // Reset sum to 0 if it becomes negative
            if(sum < 0) {
                sum = 0;
            }
        }
        
        return maxi; // Return the maximum subarray sum
    }
};
