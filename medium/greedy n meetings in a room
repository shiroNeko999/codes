N meetings in one room
Difficulty: EasyAccuracy: 45.3%Submissions: 246K+Points: 2
You are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and end[i] is the finish time of meeting i. Return the maximum number of meetings that can be accommodated in a single meeting room, when only one meeting can be held in the meeting room at a particular time. 

Note: The start time of one chosen meeting can't be equal to the end time of the other chosen meeting.

Examples :

Input: n = 6, start[] = [1, 3, 0, 5, 8, 5], end[] =  [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2), (3, 4), (5,7) and (8,9)
Input: n = 3, start[] = [10, 12, 20], end[] = [20, 25, 30]
Output: 1
Explanation: Only one meetings can be held with given start and end timings.
Expected Time Complexity: O(n*logn)
Expected Auxilliary Space: O(n)

Constraints:
1 ≤ n ≤ 105
0 ≤ start[i] < end[i] ≤ 106
==========================================================================
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

 struct meeting{
            int starting;
            int ending;     // we create our own data structure for start , end and position
            int pos;

        };
class Solution
{
    public:
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)   
    {
        // Your code here
        int count = 0;
        struct meeting meet[n];     // making a struct variable 
        for(int i = 0; i< n; i++)
        {
            meet[i].starting= start[i]; // assigning values to the structure
            meet[i].ending = end[i];
            meet[i].pos = i+1;
            
        }
        sort(meet, meet + n,comparator); // sorting in order of the endings 
        
        vector<int> answer;       // creating a vector for the meeting positions
        answer.push_back(meet[0].pos);
        int limit = meet[0].ending;
        count+=1; // count variable for the number of meetings in the structure 
        
        for(int i =1; i<n;i++)
        {   
            if(meet[i].starting>limit)
            {
                limit = meet[i].ending;
                answer.push_back(meet[i].pos);      //if the start of the second meeting is greater than the end of prev meeting , it is valid 
                count++;
            }
        }
        return count;
        
       
        
    }
    bool static comparator(struct meeting m1, meeting m2)     // comparator for the sort data structure
    {
        if( m1.ending< m2.ending)                              // sorts in accordance of the ending times
        {
            return true;
        }
        else return false;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++) cin >> start[i];

        for (int i = 0; i < n; i++) cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(start, end, n);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends
